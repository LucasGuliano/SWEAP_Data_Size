# -*- coding: utf-8 -*-
"""
@author: lguliano
"""
import os
import glob
import csv
import datetime

#Set where on Laz machine at CfA the data files are being checked for size
Data_Path = '/psp/data/moc_data_products/ssr_telemetry/'

#Set the path where data allocation files are stored 
Data_ALC_path = '/psp/data/teams/psp_soc/orbit_'

#Read in orbit dates from saved text file generated by RAT hunter
Dates_of_Orbits = open('Dates_of_Orbits.txt', 'r').read()

#function to determine how much data was used for each orbit
def data_size(Dates_of_Orbits):
    Orbit_Dates = eval(Dates_of_Orbits)
    Data_Summary = []
    
    #Get the info for each orbit date range
    for ORBS in range(len(Orbit_Dates)):
        Date_Range = Orbit_Dates[ORBS]
        start_year =Date_Range[1]
        end_year = Date_Range[3]
        start_day =Date_Range[2]
        end_day = Date_Range[4]

	   #Start setting total data to zero for each priority
        totals = [0]*9
        
        #Create day/year arrays for the orbit and handle when an orbit is split over two years
        if start_year == end_year:
            doys = range(start_day,end_day+1)
            years = [start_year]*len(doys)
        else:
            doys1 = range(start_day,366)
            years1 = [start_year]*len(doys1)
            doys2 = range(1,end_day+1)
            years2 = [end_year]*len(doys2)
            doys = doys1+doys2
            years = years1+years2
        
        #Create 3 digit strings for each day in the orbit and total the data files
        doystr = [str(i).zfill(3) for i in doys]
        for i_day in range(len(doystr)):
            #SWEAP data files will end with '_EA'
            globstr = os.path.join(Data_Path,str(years[i_day]),doystr[i_day],'*_EA')
            files = glob.glob(globstr)
            #Get data size for each EA file in orbit and add to correct priority total
            for fp in files:
                fpsize = os.path.getsize(fp)
                priority = int(fp[-4])
                totals[0] += fpsize
                totals[priority] += fpsize
                
        #Convert from bytes to gigaBites
        for i in range(0,9):
            totals[i]=totals[i] * 8e-9
        
        #Save the total data for each orbit  (writes as gigaBites)
        Data_Info = Date_Range[0], start_year, end_year, start_day, end_day, totals[0], \
            totals[1], totals[2], totals[3], totals[4], totals[5], totals[6], totals[7], totals[8]
        Data_Summary.append(Data_Info)
            
    return Data_Summary

#function to determine the allocated amount of data for each orbit
def data_allocation(Data_Summary):
    #Create storage array with 9 allocations (overall and each priority) for each orbit in Data_Summary
    Allocation_Summary = []
    
    for i in range(0,len(Data_Summary)):
        #In this orbit, start with allocation at 0 for each priority
        Alc_by_Priority = [0]*9
        Orbit_Number = Data_Summary[i][0].split('A')[0].split('B')[0].split('C')[0].split('D')[0]
        # if orbit is without a letter, search for orbit+A first, then if empty search for just orbit
        if Data_Summary[i][0] == Orbit_Number:
            Orbit_Number = int(Orbit_Number)
            Sub_Orbit = Data_Summary[i][0].strip()+'A'
            
        #B and beyond orbits can be handled normally
        else:
            Orbit_Number = int(Orbit_Number)
            Sub_Orbit = Data_Summary[i][0].split()[0]
        
        #match allocation file naming structure 
        Sub_Orbit = str(Sub_Orbit).zfill(3)
          
        #grab every data allocation file for the given orbit
        data_files_list = glob.glob('/psp/data/teams/psp_soc/*/*/*DVPS_'+Sub_Orbit+'*')
        
        #if no alc file exists for first of orbit, then search again without letter
        if len(data_files_list) < 1 and Sub_Orbit[-1] == 'A':
                Sub_Orbit = Sub_Orbit.split('A')[0]
                data_files_list = glob.glob('/psp/data/teams/psp_soc/*/*/*DVPS_'+Sub_Orbit+'*')
                
        #If still none, or none were found for secondary orbit, record N/A for data all allocation
        if len(data_files_list) < 1:
	   print('ERROR: No Allocation File was Found for Orbit: '+Sub_Orbit) 
           Alc_by_Priority = ['N/A']*9
        
        #get the most recent file and grab the info on data allocation 
        if Alc_by_Priority[0] != 'N/A':  
            correct_data_file = data_files_list[-1]
            with open(correct_data_file) as alc_csv:
                #Get info stored in allocation file
                alc_text = list(csv.reader(alc_csv,delimiter=','))
            
            #Total allocation for SWEAP is the 2nd entry on the first line
            Alc_by_Priority[0] = alc_text[1][2]
                
            #Get the allocation for each priority as well
            for p in range(1,9):
                #If SWEAP has data assigned for the priority, record how much it should be
                if alc_text[p+2][2] != ' ' and alc_text[p+2][2] != '':
                    Alc_by_Priority[p] = (float(alc_text[p+2][2])*float(Alc_by_Priority[0]))/100

        #Add to array containing info for each orbit 
        Allocation_Summary.append(Alc_by_Priority)
        
    return Allocation_Summary
        
#function to write the results and display
def data_printer(Data_Summary, Allocation_Summary,  Dates_of_Orbits):
    #Set format to have 3 places and 2 decimal places
    form = "{:05.2f}".format
    #Create format that has only 1 decimal place for percentages over 100
    per_form = "{:05.1f}".format
    
    #Convert Data Summary and Allocation summary to arrays of info, usage, alc, and % 
    Info = []
    Allocation = []
    Usage = []
    Percentage = []
    
    #Populate the arrays and format
    for i in range(len(Data_Summary)):
        
        Orbit_Info = [Data_Summary[i][0],str(Data_Summary[i][1])+'-'+str(Data_Summary[i][3]).zfill(3), \
                      str(Data_Summary[i][2])+'-'+str(Data_Summary[i][4]).zfill(3) ]
        Info.append(Orbit_Info)
        
        #Create and append array of correctly formated numbers
        Temp_Usage = Data_Summary[i][5:]
        Form_Usage = []
        for j in range(len(Temp_Usage)):
            Form_Usage.append(form(Temp_Usage[j]))
        Usage.append(Form_Usage)
        
        #If allocation sumamry is not 'N/A', then convert to the correct format
        if Allocation_Summary[i][0] != 'N/A':
            Form_Allocation = []
            for k in range(len(Allocation_Summary[i])):
                Form_Allocation.append(form(float(Allocation_Summary[i][k])))
            Allocation.append(Form_Allocation)
        else:
            Allocation.append(Allocation_Summary[i])
        
        #Calculcate the percent used, write N/A if allocation info not available
        per_orbit = ['N/A']*9
        for p in range(0,9):
            if Allocation_Summary[i][0] != 'N/A':
                if Allocation_Summary[i][p] != 0:
                    per_orbit[p] = form(100*(float(Usage[i][p])/float(Allocation_Summary[i][p])))
		    if float(per_orbit[p]) >= 100:
		       per_orbit[p] = per_form(float(per_orbit[p]))
		else:
		    per_orbit[p] = form(0.0)
        Percentage.append(per_orbit)
        
        #Create string saying when the file was created to write to top
	now = datetime.datetime.now()
	now_str= now.isoformat()
	Create_Date = '#File created: '+now_str

    with open('SWEAP_Data_Summary.csv', mode='w') as Summary_file:
         writer = csv.writer(Summary_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
         writer.writerow([Create_Date])
         writer.writerow(['#Units are in GigaBits (10^9 bits)'])

         for x in range(len(Data_Summary)):
	     #Insert header for each row
	     Allocation[x].insert(0,'Alloc:')
	     Usage[x].insert(0,'Usage:')
	     Percentage[x].insert(0,'Prcnt:')
	     #Write the rows to the CSV file
	     writer.writerow('')
             writer.writerow(['Orbit',Info[x][0],Info[x][1],Info[x][2]])
	     writer.writerow([' TYPE ','Total','   P1','   P2', '   P3', '   P4', '   P5', '   P6', '   P7', '   P8'])
             writer.writerow(Allocation[x])
             writer.writerow(Usage[x])
             writer.writerow(Percentage[x])  
   
    #Reformat entire file to place spaces after commas for increased readability
    rfile = open('SWEAP_Data_Summary.csv', "rt")
    file_content = rfile.read()
    replacement_text = file_content.replace(',',', ')
    rfile.close()

    wfile=open('SWEAP_Data_Summary.csv', "wt")
    wfile.write(replacement_text)
    wfile.close()    
    
    #print out results
    for i in range(len(Data_Summary)):
	Orbit = Info[i][0]
        Start = Info[i][1]
        Data_Alc = Allocation[i][1]
        Data_Used = Usage[i][1]
        Percent = Percentage[i][1]
        if i == len(Data_Summary)-1:
            print('Orbit '+Orbit.strip().zfill(3)+' started '+str(Start)+' and used '+str(Data_Used)+' out of '+str(Data_Alc)+ ' GigaBits ('+str(Percent)+'%) through '+Info[i][2])
        else:
            print('Orbit '+Orbit.strip().zfill(3)+' started '+str(Start)+' and used '+str(Data_Used)+' out of '+str(Data_Alc)+ ' GigaBits ('+str(Percent)+'%)')
   
    #Print out start date of most recent update
    #Orbit_Dates = eval(Dates_of_Orbits)
   # print('Orbit '+str(Orbit_Dates[-1][0]).strip().zfill(3)+' will begin on '+str(Orbit_Dates[-1][1])+'-'+str(Orbit_Dates[-1][2])).zfill(3)
    
    #Show how much data has been taken on the mission so far
    Grand_Total = 0
    for i in range(len(Usage)):
     	Grand_Total += float(Usage[i][1])	
    print('Total SWEAP Data Used: '+str(round(Grand_Total,2))+' GigaBits')   
    
if __name__ == "__main__":    
    #get how much data was used in each orbit
    #Run for each orbit in the orbit
    Data_Summary = data_size(Dates_of_Orbits)
    Allocation_Summary = data_allocation(Data_Summary)
    data_printer(Data_Summary, Allocation_Summary, Dates_of_Orbits)            
    
    
    
    
    
    
    
